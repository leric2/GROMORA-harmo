netcdf SOMORA_level1a_AC240_2019_02_21 {

// global attributes:
		:title = "Brightness temperature measured by ground-based radiometer" ;
		:location = "PAYERNE" ;
		:source = "MWR.O3_MCH" ;
		:name = "" ;
		:institution = "Swiss Meteorological Institute;MCH" ;
		:contact = "" ;
		:mail = "" ;
		:instrument = "SOMORA" ;
		:number_of_spectrometer = 1. ;
		:history = "" ;
		:references = "" ;
		:comment = "" ;
		:raw_filename = "/home/eric/Documents/PhD/GROSOM/rawData/SOMORA09_2019_02_21" ;
		:raw_data_software_version = "20121228" ;
		:calibration_version = "1.0" ;
		:raw_file_comment = "" ;
		:raw_file_warning = "consistency:unconsistentBinarySize_" ;
		:outlier_detection = "standard" ;
		:labview_logfile_warning = "no labview log found" ;
		:data_start_date = "20190221T000003Z" ;
		:data_stop_date = "20190221T235958Z" ;
		:filename = "/home/eric/Documents/PhD/GROSOM/Level1/SOMORA_level1a_AC240_2019_02_21.nc" ;
		:creation_date = "20201230T154338Z" ;
		:featureType = "timeSeries" ;

group: spectrometer1 {
  dimensions:
  	time = UNLIMITED ; // (144 currently)
  	channel_idx = 16384 ;
  variables:
  	double time(time) ;
  		time:units = "days since 2000-01-01 00:00:00" ;
  		time:calendar = "standard" ;
  		time:description = "mean time recorded at the beginning of all sky measurements during this calibration cycle" ;
  	int64 channel_idx(channel_idx) ;
  		channel_idx:_FillValue = -9999LL ;
  		channel_idx:description = "index of the spectrometer channels, from 1 to N (number of channels)" ;
  	float lat(time) ;
  		lat:_FillValue = -9999.f ;
  		lat:long_name = "station latitude" ;
  		lat:standard_name = "latitude" ;
  		lat:units = "degree_north" ;
  		lat:description = "latitude defined according to WGS84" ;
  	float lon(time) ;
  		lon:_FillValue = -9999.f ;
  		lon:long_name = "station longitude" ;
  		lon:standard_name = "longitude" ;
  		lon:units = "degree_east" ;
  		lon:description = "longitude defined according to WGS84" ;
  	float alt(time) ;
  		alt:_FillValue = -9999.f ;
  		alt:long_name = "station altitude" ;
  		alt:standard_name = "altitude" ;
  		alt:units = "m" ;
  		alt:description = "above see level" ;
  	float azimuth_angle(time) ;
  		azimuth_angle:_FillValue = -9999.f ;
  		azimuth_angle:long_name = "azimuth angle" ;
  		azimuth_angle:standard_name = "sensor_azimuth_angle" ;
  		azimuth_angle:units = "degree" ;
  		azimuth_angle:description = "angle measured clockwise positive, 0 deg is northwise" ;
  	double MJD2K(time) ;
  		MJD2K:_FillValue = -9999. ;
  		MJD2K:units = "MJD2K" ;
  		MJD2K:calendar = "Julian" ;
  		MJD2K:description = "mean time recorded at the beginning of all sky measurements during this calibration cycle" ;
  	int64 year(time) ;
  		year:_FillValue = -9999LL ;
  		year:description = "year of the measurement as integer" ;
  	int64 month(time) ;
  		month:_FillValue = -9999LL ;
  		month:description = "month of the measurement as integer" ;
  	int64 day(time) ;
  		day:_FillValue = -9999LL ;
  		day:description = "day of the month as integer" ;
  	double time_of_day(time) ;
  		time_of_day:_FillValue = -9999. ;
  		time_of_day:long_name = "Time of day" ;
  		time_of_day:standard_name = "time_of_day" ;
  		time_of_day:units = "hour" ;
  		time_of_day:description = "Time of the day" ;
  	double first_sky_time(time) ;
  		first_sky_time:_FillValue = -9999. ;
  		first_sky_time:units = "days since 2000-01-01 00:00:00" ;
  		first_sky_time:calendar = "standard" ;
  		first_sky_time:description = "time of the first sky measurements in this calibration cycle" ;
  	double last_sky_time(time) ;
  		last_sky_time:_FillValue = -9999. ;
  		last_sky_time:units = "days since 2000-01-01 00:00:00" ;
  		last_sky_time:calendar = "standard" ;
  		last_sky_time:description = "time of the last sky measurements in this calibration cycle" ;
  	double time_min(time) ;
  		time_min:_FillValue = -9999. ;
  		time_min:units = "days since 2000-01-01 00:00:00" ;
  		time_min:calendar = "standard" ;
  		time_min:description = "minimum theoretical start time for this calibration cycle" ;
  	double Tb(time, channel_idx) ;
  		Tb:_FillValue = -9999. ;
  		Tb:long_name = "Tb" ;
  		Tb:standard_name = "brightness_temperature" ;
  		Tb:units = "K" ;
  		Tb:description = "calibrated brightness temperature for this cycle" ;
  	double stdTb(time, channel_idx) ;
  		stdTb:_FillValue = -9999. ;
  		stdTb:long_name = "standard variation of Tb" ;
  		stdTb:standard_name = "std_Tb" ;
  		stdTb:units = "K" ;
  		stdTb:description = "standard deviation of brightness temperature for this cycle per channel" ;
  	double frequencies(channel_idx) ;
  		frequencies:_FillValue = -9999. ;
  		frequencies:long_name = "frequency vector" ;
  		frequencies:standard_name = "frequency" ;
  		frequencies:units = "Hz" ;
  		frequencies:description = "frequency vector for the spectrometer" ;
  	double intermediate_freq(channel_idx) ;
  		intermediate_freq:_FillValue = -9999. ;
  		intermediate_freq:long_name = "intermediate frequency vector" ;
  		intermediate_freq:standard_name = "intermediate_frequency" ;
  		intermediate_freq:units = "Hz" ;
  		intermediate_freq:description = "intermediate frequency vector for the spectrometer" ;
  	double mean_std_Tb(time) ;
  		mean_std_Tb:_FillValue = -9999. ;
  		mean_std_Tb:long_name = "mean standard variation of Tb" ;
  		mean_std_Tb:standard_name = "mean_std_Tb" ;
  		mean_std_Tb:units = "K" ;
  		mean_std_Tb:description = "mean standard deviation of brightness temperature for this cycle (without bad channel)" ;
  	double THot(time) ;
  		THot:_FillValue = -9999. ;
  		THot:long_name = "THot" ;
  		THot:standard_name = "hot_load_temperature" ;
  		THot:units = "K" ;
  		THot:description = "Mean temperature of the hot load" ;
  	double stdTHot(time) ;
  		stdTHot:_FillValue = -9999. ;
  		stdTHot:long_name = "stdTHot" ;
  		stdTHot:standard_name = "std_hot_load_temperature" ;
  		stdTHot:units = "K" ;
  		stdTHot:description = "standard deviation of the hot load temperature" ;
  	double noise_temperature(time) ;
  		noise_temperature:_FillValue = -9999. ;
  		noise_temperature:long_name = "noise receiver temperature" ;
  		noise_temperature:standard_name = "noise_temperature" ;
  		noise_temperature:units = "K" ;
  		noise_temperature:description = "mean noise receiver temperature" ;
  	double std_dev_noise_temperature(time) ;
  		std_dev_noise_temperature:_FillValue = -9999. ;
  		std_dev_noise_temperature:long_name = "standard deviation of noise receiver temperature" ;
  		std_dev_noise_temperature:standard_name = "std_noise_temperature" ;
  		std_dev_noise_temperature:units = "K" ;
  		std_dev_noise_temperature:description = "standard deviation of the noise receiver temperature" ;
  	double calibration_time(time) ;
  		calibration_time:_FillValue = -9999. ;
  		calibration_time:long_name = "calibrationTime" ;
  		calibration_time:standard_name = "calibration_time" ;
  		calibration_time:units = "second" ;
  		calibration_time:description = "Time interval used for calibrating the spectra" ;
  	double mean_sky_elevation_angle(time) ;
  		mean_sky_elevation_angle:_FillValue = -9999. ;
  		mean_sky_elevation_angle:long_name = "mean sky angle" ;
  		mean_sky_elevation_angle:standard_name = "elevation_angle" ;
  		mean_sky_elevation_angle:units = "degree" ;
  		mean_sky_elevation_angle:description = "mean elevation angle of the sky observation during this cycle" ;
  	double TRoom(time) ;
  		TRoom:_FillValue = -9999. ;
  		TRoom:long_name = "TRoom" ;
  		TRoom:standard_name = "room_temperature" ;
  		TRoom:units = "K" ;
  		TRoom:description = "mean room temperature" ;
  	double TWindow(time) ;
  		TWindow:_FillValue = -9999. ;
  		TWindow:long_name = "TWindow" ;
  		TWindow:standard_name = "window_temperature" ;
  		TWindow:units = "K" ;
  		TWindow:description = "mean window temperature" ;
  	double stdTRoom(time) ;
  		stdTRoom:_FillValue = -9999. ;
  		stdTRoom:long_name = "stdTRoom" ;
  		stdTRoom:standard_name = "standard_room_temperature" ;
  		stdTRoom:units = "K" ;
  		stdTRoom:description = "standard deviation of room temperature" ;
  	double TOut(time) ;
  		TOut:_FillValue = -9999. ;
  		TOut:long_name = "TOut" ;
  		TOut:standard_name = "outside_temperature" ;
  		TOut:units = "K" ;
  		TOut:description = "mean outside temperature" ;
  	double noise_level(time) ;
  		noise_level:_FillValue = -9999. ;
  		noise_level:long_name = "std(diff(Tb))/sqrt(2)" ;
  		noise_level:standard_name = "noise_level" ;
  		noise_level:units = "K" ;
  		noise_level:description = "describes how noisy is the spectra" ;
  	int64 number_of_hot_spectra(time) ;
  		number_of_hot_spectra:_FillValue = -9999LL ;
  		number_of_hot_spectra:long_name = "number of hot spectra" ;
  		number_of_hot_spectra:standard_name = "number_of_hot_spectra" ;
  		number_of_hot_spectra:units = "1" ;
  		number_of_hot_spectra:description = "number of hot spectra averaged together in this cycle" ;
  	int64 number_of_cold_spectra(time) ;
  		number_of_cold_spectra:_FillValue = -9999LL ;
  		number_of_cold_spectra:long_name = "number of cold spectra" ;
  		number_of_cold_spectra:standard_name = "number_of_cold_spectra" ;
  		number_of_cold_spectra:units = "1" ;
  		number_of_cold_spectra:description = "number of cold spectra averaged together in this cycle" ;
  	int64 number_of_sky_spectra(time) ;
  		number_of_sky_spectra:_FillValue = -9999LL ;
  		number_of_sky_spectra:long_name = "number of sky spectra" ;
  		number_of_sky_spectra:standard_name = "number_of_sky_spectra" ;
  		number_of_sky_spectra:units = "1" ;
  		number_of_sky_spectra:description = "number of sky spectra averaged together in this cycle" ;
  	double mean_hot_counts(time) ;
  		mean_hot_counts:_FillValue = -9999. ;
  		mean_hot_counts:long_name = "mean FFTS hot counts" ;
  		mean_hot_counts:standard_name = "mean_hot_counts" ;
  		mean_hot_counts:units = "1" ;
  		mean_hot_counts:description = "mean raw FFTS counts on hot load during this cycle" ;

  // group attributes:
  		:spectrometer_type = "AC240" ;
  } // group spectrometer1

group: flags {
  dimensions:
  	time = UNLIMITED ; // (144 currently)
  	flags = 6 ;
  variables:
  	double time(time) ;
  		time:units = "days since 2000-01-01 00:00:00" ;
  		time:calendar = "standard" ;
  		time:description = "mean time of the measurements for this cycle" ;
  	int64 flags(flags) ;
  	int64 calibration_flags(time, flags) ;
  		calibration_flags:_FillValue = -9999LL ;
  		calibration_flags:errorCode_1 = "sufficientNumberOfIndices" ;
  		calibration_flags:errorCode_2 = "noiseTemperatureOK" ;
  		calibration_flags:errorCode_3 = "LN2SensorsOK" ;
  		calibration_flags:errorCode_4 = "LN2LevelOK" ;
  		calibration_flags:errorCode_5 = "hotLoadOK" ;
  		calibration_flags:errorCode_6 = "pointingAngleOK" ;

  // group attributes:
  		:description = "Each spectra is associated with a flag vector. The order and meaning of the flags are described in its attributes" ;
  		:number_of_flags = 6. ;
  } // group flags

group: meteo {
  dimensions:
  	time = UNLIMITED ; // (143 currently)
  variables:
  	double time(time) ;
  		time:_FillValue = -9999. ;
  		time:units = "days since 2000-01-01 00:00:00" ;
  		time:calendar = "standard" ;
  		time:description = "time from the meteo stations" ;
  	double air_pressure(time) ;
  		air_pressure:_FillValue = -9999. ;
  		air_pressure:long_name = "air pressure" ;
  		air_pressure:standard_name = "air_pressure" ;
  		air_pressure:units = "hPa" ;
  		air_pressure:description = "air pressure at the station" ;
  	double air_temperature(time) ;
  		air_temperature:_FillValue = -9999. ;
  		air_temperature:long_name = "air temperature" ;
  		air_temperature:standard_name = "air_temperature" ;
  		air_temperature:units = "K" ;
  		air_temperature:description = "air temperature at the station" ;
  	double relative_humidity(time) ;
  		relative_humidity:_FillValue = -9999. ;
  		relative_humidity:long_name = "relative humidity" ;
  		relative_humidity:standard_name = "relative_humidity" ;
  		relative_humidity:units = "1" ;
  		relative_humidity:description = "relative humidity of the air at the station" ;
  	double precipitation(time) ;
  		precipitation:_FillValue = -9999. ;
  		precipitation:long_name = "precipitation" ;
  		precipitation:standard_name = "precipitation" ;
  		precipitation:units = "mm" ;
  		precipitation:description = "Accumulation of precipitation during the cycle (from gauge ?)" ;
  } // group meteo
}

